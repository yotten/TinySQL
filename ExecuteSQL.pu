@startuml

class testExecuteSQL {}
class SqlQueryInfo {
	+vector<const string> tableNames
	+vector<TokenKind> orders
	+shared_ptr<ExtensionTreeNode> whereTopNode
	+vector<Column> selectColumns
	+vector<shared_ptr<ExtensionTreeNode>> whereExtensionNodes
	+vector<Column> orderByColumns
}
class SqlQuery {
	-ofstream outputFile
	-const string alpahUnder
	-const string alpahNumUnder
	-const string signNum
	-const string space
	-const vector<const Token> keywordConditions
	-const vector<const Token> signConditions
	-const vector<const Operator> operators
	-vector<const Token> tokens
	-void CheckClosingFiles()
	-bool Equali(const string str1, const string str2)
	-const shared_ptr<vector<Token>> GetTokens(const string sql) const;
	-const shared_ptr<const SqlQueryInfo> AnalyzeTokens(const vector<const Token> &tokens) const
	-const shared_ptr<vector<vector<vector<Data>>>> ReadCsv(const SqlQueryInfo& queryInfo)
	-const shared_ptr<const vector<InputTable>> ReadCsv() const
	-void WriteCsv(const string outputFileName, const vector<InputTable> &inputTables) const
	+SqlQuery(const string sql)
	+void Execute(const string outputFileName)
}
class ExecuteSQL {
	
}

class InputTable {
	+vector<Column> columns
	+vector<vector<Data>> data
}

class Data {
    +DataType type
	-string m_string
	-union value
	+Data(const char* value)
	+Data(const int value)
	+Data(const bool value)
	+const string& string() const
	+const int& integer() const
	+const bool& boolean() const
}
class Operator{
    +TokenKind kind
    +int order
}
class Token{
    +TokenKind kind
    +string word;
}
class ExtensionTreeNode{
	+shared_ptr<ExtensionTreeNode> parent
	+shared_ptr<ExtensionTreeNode> left
	+Operator middleOperator
	+shared_ptr<ExtensionTreeNode>right
	+bool inParen
	+int parenOpenBeforeClose
	+int signCoefficient
	+ExtensionTreeNode()
}
class ColumnIndex{
    +int table
    +int column
}
class Column{
    +string tableName
    +string columnName
    +Column()
    +Column(const string columnName)
    +Column(const string tableName, const string columnName)
}
class IntLiteralReader {
	#const shared_ptr<const Token> Read(string::const_iterator &cursol, const string::const_iterator& end) const;
}
class StringLiteralReader {
	#const shared_ptr<const Token> Read(string::const_iterator &cursol, const string::const_iterator& end) const
}
class TokenReader {
    #const string alpahUnder
	#const string alpahNumUnder
	#const string signNum
	#const string num
	#const string space
	#const shared_ptr<const Token> ReadCore(string::const_iterator &cursol, const string::const_iterator& end)
	+const shared_ptr<const Token> Read(string::const_iterator &cursol, const string::const_iterator& end) const;
}

enum DataType{
   	STRING
	INTEGER
	BOOLEAN
}
enum TokenKind{
    NOT_TOKEN
	ASC
	AND
	BY
	DESC
	FROM
	OR
	ORDER
	SELECT
	WHERE
	ASTERISK
	COMMA
	CLOSE_PAREN
	DOT
	EQUAL
	GREATER_THAN
	GREATER_THAN_OR_EQUAL
	LESS_THAN
	LESS_THAN_OR_EQUAL
	MINUS
	NOT_EQUAL
	OPEN_PAREN
	PLUS
	SLASH
	IDENTIFIER
	INT_LITERAL
	STRING_LITERAL
}
enum ResultValue{
    OK
	ERR_FILE_OPEN
	ERR_FILE_WRITE
	ERR_FILE_CLOSE
	ERR_TOKEN_CANT_READ
	ERR_SQL_SYNTAX
	ERR_BAD_COLUMN_NAME
	ERR_WHERE_OPERAND_TYPE
	ERR_CSV_SYNTAX
	ERR_MEMORY_ALLOCATE
	ERR_MEMORY_OVER
}

ExecuteSQL <-- testExecuteSQL
SqlQuery <-- ExecuteSQL
ResultValue <-- ExecuteSQL

Data <-- SqlQuery
Operator <-- SqlQuery
Token <-- SqlQuery
ExtensionTreeNode <-- SqlQuery
ColumnIndex <-- SqlQuery
Column <-- SqlQuery
ResultValue <-- SqlQuery
SqlQueryInfo <-- SqlQuery
InputTable <-- SqlQuery
'IntLiteralReader <-- SqlQuery
'StringLiteralReader <-- SqlQuery
TokenReader <-- SqlQuery

Token <-- IntLiteralReader
Token <-- StringLiteralReader
Token <-- TokenReader
ResultValue <-- StringLiteralReader

TokenReader <|-- IntLiteralReader
TokenReader <|-- StringLiteralReader

Column <-- InputTable
Data <-- InputTable

Column <-- SqlQueryInfo
TokenKind <-- SqlQueryInfo
ExtensionTreeNode <-- SqlQueryInfo

DataType <-- Data
TokenKind <-- Token
TokenKind <-- Operator
Operator <-- ExtensionTreeNode
Column <-- ExtensionTreeNode
Data <-- ExtensionTreeNode
@enduml