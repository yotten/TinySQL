@startuml

class testExecuteSQL {}
class SqlQuery {
	-vector<ifstream> inputTableFiles
	-ofstream outputFile
	-bool found
	-vector<vector<vector<Data>>> inputData
	-vector<vector<Data>> outputData
	-vector<vector<Data>> allColumnOutputData	
	-const string alpahUnder
	-const string alpahNumUnder
	-const string signNum
	-const string num
	-const string space
	-const vector<const Token> keywordConditions
	-const vector<const Token> signConditions
	-const vector<const Operator> operators
	-vector<const Token> tokens
	-vector<const string> tableNames
	-string m_sql
	-string m_outputFileName
	-bool Equali(const string str1, const string str2)
	-void GetTokens()
	+SqlQuery()
	+int SqlQuery::Execute(const string sql, const string outputFileName)
}
class ExecuteSQL {
	
}

class Data {
    +DataType type
	-string m_string
	-union value
	+Data(const char* value)
	+Data(const int value)
	+Data(const bool value)
	+const string& string() const
	+const int& integer() const
	+const bool& boolean() const
}
class Operator{
    +TokenKind kind
    +int order
}
class Token{
    +TokenKind kind
    +string word;
}
class ExtensionTreeNode{
	+shared_ptr<ExtensionTreeNode> parent
	+shared_ptr<ExtensionTreeNode> left
	+Operator middleOperator
	+shared_ptr<ExtensionTreeNode>right
	+bool inParen
	+int parenOpenBeforeClose
	+int signCoefficient
	+ExtensionTreeNode()
}
class ColumnIndex{
    +int table
    +int column
}
class Column{
    +string tableName
    +string columnName
    +Column()
    +Column(const string columnName)
    +Column(const string tableName, const string columnName)
}
enum DataType{
   	STRING
	INTEGER
	BOOLEAN
}
enum TokenKind{
    NOT_TOKEN
	ASC
	AND
	BY
	DESC
	FROM
	OR
	ORDER
	SELECT
	WHERE
	ASTERISK
	COMMA
	CLOSE_PAREN
	DOT
	EQUAL
	GREATER_THAN
	GREATER_THAN_OR_EQUAL
	LESS_THAN
	LESS_THAN_OR_EQUAL
	MINUS
	NOT_EQUAL
	OPEN_PAREN
	PLUS
	SLASH
	IDENTIFIER
	INT_LITERAL
	STRING_LITERAL
}
enum ResultValue{
    OK
	ERR_FILE_OPEN
	ERR_FILE_WRITE
	ERR_FILE_CLOSE
	ERR_TOKEN_CANT_READ
	ERR_SQL_SYNTAX
	ERR_BAD_COLUMN_NAME
	ERR_WHERE_OPERAND_TYPE
	ERR_CSV_SYNTAX
	ERR_MEMORY_ALLOCATE
	ERR_MEMORY_OVER
}

ExecuteSQL <-- testExecuteSQL
SqlQuery <-- ExecuteSQL
Data <-- SqlQuery
Operator <-- SqlQuery
Token <-- SqlQuery
ExtensionTreeNode <-- SqlQuery
ColumnIndex <-- SqlQuery
Column <-- SqlQuery
ResultValue <-- SqlQuery
DataType <-- Data
TokenKind <-- Token
TokenKind <-- Operator
Operator <-- ExtensionTreeNode
Column <-- ExtensionTreeNode
Data <-- ExtensionTreeNode
@enduml